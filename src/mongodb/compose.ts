import { IMongoInDockerCmdArgs } from '../common/interfaces';
import { stringify, Document } from 'yaml';
import path from 'path';
import { keywords } from '../common/cmd-styles';
import { writeFileSync } from 'fs';

const Template = () => ({
    version: "3.9",
    services: {
        "mongodb": {
            container_name: "${CONTAINER_NAME}-mongo",
            image: "mongo",
            environment: [
                "MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}",
                "MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}"
            ],
            ports: [
                "${MONGO_SERVER_PORT}:27017"
            ],
            volumes: ["mongo-data:/data/db"]
        },
        "mongo-express": {
            container_name: "${CONTAINER_NAME}-mongo",
            image: "mongo-express:0.54.0",
            restart: "always",
            depends_on: [
                "mongodb"
            ],
            environment: [
                "ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER}",
                "ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}",
                "ME_CONFIG_MONGODB_SERVER=${CONTAINER_NAME}-mongo"
            ],
            ports: ["8080:8081"]
        }
    },
    volumes: {
        "mongo-data": {
            driver: "local"
        }
    }
});

export const ensure = (args: IMongoInDockerCmdArgs) => {

    // Generate the compose file
    const template = Template();

    // No Mongo-Express, please and thank you
    if (!args.includeMongoExpress) delete template.services["mongo-express"];
    
    // Prepare to write to filesystem
    const doc = new Document(template);
    doc.commentBefore = ` This compose file was generated by create-in-docker!`
    const fileName = "docker-compose.yaml";
    const buffer = stringify(doc);

    try {
        console.debug(`Writing to COMPOSE file ${keywords(fileName)}.`);
        writeFileSync(path.join(args.cwd, 'docker-compose.yaml'), buffer);
    } catch (err) {
        console.error(`ERROR writing to "${path.join(args.cwd, fileName)}": ${err}`);
        return false;
    }
}